#include <iostream>
#include <string>
#include <sstream>
#include <algorithm>
#include <iterator>
#include <vector>
#include <queue>
#include <cstdlib>
#include <algorithm>
#include <cilk.h>
#include "bfs_queue.h"

#define P 12
#define NSEG 5

using namespace std;


void parallel_bfs_thread(BfsQueue& qin, BfsQueue& qout, int p, vector<int> & d, vector<vector<int> > & tau) {
  vector<int> * S;
  while ((S = qin.nextSegment()) != NULL) {
	for (int i = 0; i < S->size(); i++) {
	  int u = S->at(i);
	  for (int j = 0; j < tau[u].size(); j++) {

		int v = tau[u][j];

		if (d[v] == -1) {
		  d[v] = d[u] + 1;
		  qout.enque(p, v);
		}

	  }


	}
	
	delete(S);

  }
}


void parallel_bfs(int source_index, int n, vector<vector<int> > & tau) {

  vector<int> d;
  
  for (int i = 0; i <= n; i++ ) {
	d.push_back(-1);
  }
  
  d[source_index] = 0;
  
  BfsQueue * qin = new BfsQueue(P, NSEG);
  BfsQueue  * qout = new BfsQueue(P, NSEG);

   qin->enque(0, source_index);

   while (qin->getSize() != 0) {
	 qin->set_segment_size();
	 for (int i = 0 ; i < P - 1; i++) {
	   cilk_spawn parallel_bfs_thread(*qin, *qout, i, d, tau);
	}
	 parallel_bfs_thread(*qin, *qout, P -1, d, tau);
	 cilk_sync;
	 qin = qout;
	 delete(qout);
	 qout = new BfsQueue(P, NSEG);
  }

   long int checksum = 0;
   int max_depth = 0;
   
   for (int i = 1; i <= n; i++ ) {
	 if (max_depth < d[i]){
	   max_depth = d[i];
	 }
	 
	 if (d[i] == -1) 
	   checksum += n;
	 else
	   checksum += d[i];
   }

  cout <<max_depth << " "<< checksum<<endl;
   

}



int cilk_main(){
  int n;
  int m;
  int r;
  

  string string_n;
  getline(cin, string_n);
  vector<string> tokens;
  istringstream iss(string_n);
  copy(istream_iterator<string>(iss),
	   istream_iterator<string>(),
	   back_inserter<vector<string> >(tokens));
  
  n = atoi(tokens[0].c_str());
  m = atoi(tokens[1].c_str());
  r = atoi(tokens[2].c_str());
  

  vector<vector<int> > tau(n + 1);
  

  for (int i = 0; i < m; i++) {

	string temp;
	vector<string> tokenized;
	getline(cin, temp);

	stringstream iss(temp);
	copy(istream_iterator<string>(iss),
		 istream_iterator<string>(),
		 back_inserter<vector<string> >(tokenized));

	int u = atoi(tokenized[0].c_str());
	int v = atoi(tokenized[1].c_str());

	tau[u].push_back(v);
  }

  for (int j = 0; j < r ; j++) {
	string source_string;
	getline(cin, source_string);
	int source_index = atoi(source_string.c_str());
	
	parallel_bfs(source_index, n, tau);

  }
  
  
  return 0;

  
}

