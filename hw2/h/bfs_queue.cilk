#include <iostream>
#include <string>
#include <sstream>
#include <algorithm>
#include <iterator>
#include <vector>
#include <queue>
#include <cstdlib>
#include <algorithm>
#include <cilk.h>
#include <time.h>
#include <math.h>
#include <deque>
#include "bfs_queue.h"


using namespace std;

BfsQueue :: BfsQueue(int procs, int n ) {

  nseg = n;
  p = procs;
  

  for (int i = 0; i < p; i++) {
	queues.push_back(std::deque<int>());
  }
}

void BfsQueue::enque(int i, int value) {
  if (i < p) {
	queues[i].push_back(value);
		
  }
}

void BfsQueue::set_segment_size() {
  int size = getSize();
  int temp = nseg / size;
  seg = temp == 0 ? size : temp;
}


int BfsQueue :: deque(int p) {

  if (!queues[p].empty()) {
	// Get the vertices from the processor's queue
	int u = queues[p].front();
	queues[p].pop_front();
	return u;
  }
  else  {
	// Steal 
	srand(time(NULL));
	
	// clogp attempts, if we do not hit a usable queue 
	// in these many times then probably the queues 
	// are empty
	int attempts = log10(p) / log10(2);


	for (int i = 0 ; i < attempts; i++) {
	  int proc_id = rand() % p;
	  if (!queues[proc_id].size()) {
		// We can steal from this queue
		int u = queues[proc_id] .back();
		queues[proc_id].pop_back();
		return u;
	  }
	  
	
	}
	return 0;
  }
}
  
 int BfsQueue::getSize() {
	int n = 0;

	for (int i = 0; i < p; i++) {
		n += 	queues[i].size();
	}

	return n;
}

